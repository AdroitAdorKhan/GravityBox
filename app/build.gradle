apply plugin: 'com.android.application'
android {
    signingConfigs {
        releaseConfig
    }
    compileSdkVersion 23
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.wrbug.gravitybox.nougat"
        minSdkVersion 24
        maxSdkVersion 25
        targetSdkVersion 23
        versionCode 10030
        versionName "1.0.3"
    }
    buildTypes {
        debug {
            versionNameSuffix "-Dev"
            if (signingConfigs.releaseConfig != null) {
                signingConfig signingConfigs.releaseConfig
            }
        }
        release {
            versionNameSuffix "-Beta"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (signingConfigs.releaseConfig != null) {
                signingConfig signingConfigs.releaseConfig
            }
        }
    }
}
afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.path + "/${variant.buildType.name}",
                    "GravityBox[NG]-${variant.versionName}-${packageTime()}.apk")
        }
    }
}

def packageTime() {
    return new Date().format("yyyyMMdd", TimeZone.getDefault())
}

dependencies {
    provided 'de.robv.android.xposed:api:82'
    compile 'com.android.support:appcompat-v7:23+'
    compile 'com.tencent.bugly:crashreport_upgrade:1.3.0'
    compile 'com.tencent.bugly:nativecrashreport:3.2.0'
    compile ('com.github.didikee:AndroidDonate:0.1.0'){
        exclude module: 'appcompat-v7'
    }
}

Properties props = new Properties()
def propFile = file('../signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props != null &&
            props.containsKey('SIGN_FILE') && props.containsKey('SIGN_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.releaseConfig.storeFile = file(props['SIGN_FILE'])
        android.signingConfigs.releaseConfig.storePassword = props['SIGN_PASSWORD']
        android.signingConfigs.releaseConfig.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.releaseConfig.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'release build not found signing properties'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'release build not found signing file'
    android.buildTypes.release.signingConfig = null
}